---
title: "第3章"
format: 
  html:
    theme: journal
    highlight-style: pygments
number-sections: true
toc: true
toc-depth: 3
toc-location: left
code-fold: show #code-fold:showでコードの折り畳みが可能
date: "最終更新: `r Sys.Date()`"
---

```{r setup, include=FALSE}
rm(list = ls())
knitr::opts_chunk$set(cache = FALSE, echo = TRUE, fig.align = "center", warning = FALSE)
library(ggplot2)
library(magrittr)
library(clubSandwich)
library(foreach)
library(kableExtra)
library(modelsummary)
library(CausalInferenceTextbook)
color_main <- scales::viridis_pal(option = "D")(1)
```

```{r include=FALSE}
library(fwildclusterboot)
```

# [3-1]クラスターブートストラップ

```{r}
set.seed(1)
dqrng::dqset.seed(1)
```

```{r}
N <- 50
N_C <- 100
N_M <- 500
N_B <- 999
```

```{r}
data_large_cluster <- 
  return_dgp_cluster(
    N = N,
    N_C = N_C
  )
```

```{r}
lm_fit <- 
  lm(Y ~ X,
     data = data_large_cluster)

t_HC <- 
  summary(lm_fit)$coefficients[2, 1] /
  sqrt(sandwich::vcovHC(lm_fit, type = "HC")[2, 2])

cat("Heteroskedasticity-robust t-statistics",
    t_HC,
    "\n")

estimatr::lm_robust(
    Y ~ X,
    data = data_large_cluster,
    se_type = "stata"
  ) %>% 
  summary(.)

```

```{r}
vc_cr0 <- 
  clubSandwich::vcovCR(
    lm_fit,
    cluster = data_large_cluster$C,
    type = "CR0"
  )

vc_cr3 <- 
  clubSandwich::vcovCR(
    lm_fit,
    cluster = data_large_cluster$C,
    type = "CR3"
  )

cat(
  "Cluster-robust t_value, CR0",
  clubSandwich::coef_test(
    lm_fit,
    vcov = vc_cr0,
    coefs = "X"
  )$p_Satt,
  "\n"
)
```

```{r}
cat(
  "Cluster-robust p_value, CR3",
  clubSandwich::coef_test(
    lm_fit,
    vcov = vc_cr3,
    coefs = "X"
  )$p_Satt,
  "\n"
)
```

```{r}
p_val_w <- 
  fwildclusterboot::boottest(
    object = lm_fit,
    clustid = "C",
    param = "X",
    B = N_B,
    type = "webb"
  )$p_val

cat("Wild cluster-bootstrap p_value",
    p_val_w,
    "\n")
```

```{r cache=TRUE}
t_w <- 
  rep(NA, N_M)

t_cr0 <- 
  rep(NA, N_M)

t_cr3 <- 
  rep(NA, N_M)

p_cr_w <- 
  rep(NA, N_M)

for(
  i in 1:N_M
) {
  data_large_cluster <- 
    return_dgp_cluster(
      N = N,
      N_C = N_C
    )
  lm_fit <- 
    lm(
      Y ~ X,
      data = data_large_cluster
    )
  t_w[i] <- summary(lm_fit)$coefficients[2, 3]
  
  vc_cr0 <- 
    clubSandwich::vcovCR(
      lm_fit,
      cluster = data_large_cluster$C,
      type = "CR0"
    )
  vc_cr3 <- 
    clubSandwich::vcovCR(
      lm_fit,
      cluster = data_large_cluster$C,
      type = "CR3"
    )
  
  t_cr0[i] <- 
    clubSandwich::coef_test(
      lm_fit,
      vcov = vc_cr0,
      coefs = "X",
    )$tstat
  
  t_cr3[i] <- 
    clubSandwich::coef_test(
      lm_fit,
      vcov = vc_cr3,
      coefs = "X"
    )$tstat
  
  invisible(
    capture.output(
      boot_lm <- 
        fwildclusterboot::boottest(
          object = lm_fit,
          clustid = "C",
          param = "X",
          B = N_B,
          type = "webb"
        )
    )
  ) 
  
  invisible(
    capture.output(
      p_cr_w[i] <- boot_lm$p_val
    )
  )
}
```

```{r}
result_large <- 
  tibble::tibble(
    specifications = c(
       "Heteroskedasticity-robust",
      "Cluster-robust CR0",
      "Cluster-robust CR3",
      "Wild Cluster Bootstrap"
    ),
    rejection_probability = c(
      mean(abs(t_w) >= 1.965, na.rm = TRUE),
      mean(abs(t_cr0) >= 1.965, na.rm = TRUE),
      mean(abs(t_cr3) >= 1.965, na.rm = TRUE),
      mean(p_cr_w < 0.05, na.rm = TRUE)
    )
  )

result_large
```

```{r}
set.seed(1)
dqrng::dqset.seed(1)
```

```{r}
N <- 100
N_C <- 8
N_M <- 500
N_B <- 999
```

```{r cache=TRUE}
t_w <- 
  rep(NA, N_M)
t_cr0 <- 
  rep(NA, N_M)
t_cr3 <- 
  rep(NA, N_M)
p_cr_w <- 
  rep(NA, N_M)

for(
  i in 1:N_M
) {
  data_extreme_small_cluster <- 
    return_dgp_cluster(
      N = N,
      N_C = N_C
    )
  
  lm_fit <- 
    lm(Y ~ X,
       data = data_extreme_small_cluster)
  
  t_w[i] <- summary(lm_fit)$coefficients[2, 3]
  
  vc_cr0 <- 
    clubSandwich::vcovCR(
      lm_fit,
      cluster = data_extreme_small_cluster$C,
      type = "CR0"
    )
  
  vc_cr3 <- 
    clubSandwich::vcovCR(
      lm_fit,
      cluster = data_extreme_small_cluster$C,
      type = "CR3"
    )
  
  t_cr0[i] <- 
    clubSandwich::coef_test(
      lm_fit,
      vcov = vc_cr0,
      coefs = "X"
    )$tstat
  
  t_cr3[i] <- 
    clubSandwich::coef_test(
      lm_fit,
      vcov = vc_cr3,
      coefs = "X"
    )$tstat
  
  invisible(
    capture.output(
      boot_lm <- 
        fwildclusterboot::boottest(
          object = lm_fit,
          clustid = "C",
          param = "X",
          B = N_B,
          type = "webb"
        )
    )
  )
  
  invisible(
    capture.output(
      p_cr_w[i] <- boot_lm$p_val
    )
  )
}
```

```{r}
result_extremely_small <- 
  tibble::tibble(
    specifications = c(
      "Heteroskedasticity-robust",
      "Cluster-robust CR0",
      "Cluster-robust CR3",
      "Wild Cluster Bootstrap"
    ),
    rejection_probability = c(
      mean(abs(t_w) >= 1.965, na.rm = TRUE),
      mean(abs(t_cr0) >= 1.965, na.rm = TRUE),
      mean(abs(t_cr3) >= 1.965, na.rm = TRUE),
      mean(p_cr_w < 0.05, na.rm = TRUE)
    )
  )

result_extremely_small
```

<br>

# [3-2]多重検定: FWER制御

```{r}
N <- 300
M <- 30
M_F <- 10
L <- 100
alpha <- 0.05
```

```{r}
z_allnull <- 
  runif(N) >= 0.5

df_list_allnull <- 
  seq_len(M) %>% 
  purrr::map(
    ~ tibble::tibble(
      z = z_allnull,
      y = rnorm(N)
    )
  )
```

```{r}
result_list_allnull <- 
  df_list_allnull %>% 
  purrr::map(
    .,
    ~ lm(formula = y ~ z,
         data = .)
  )

t_list_allnull <- 
  result_list_allnull %>% 
  purrr::map(
    ~ summary(.) %>% 
      coef() %>% 
      .["zTRUE", "t value"]
  ) %>% 
  purrr::reduce(c)

p_list_allnull <- 
  result_list_allnull %>% 
  purrr::map(
    ~ summary(.) %>% 
      coef() %>% 
      .["zTRUE", "Pr(>|t|)"]
  ) %>% 
  purrr::reduce(c)
```

```{r}
ggplot(
  mapping = 
    aes(x = seq_along(t_list_allnull),
        y = abs(t_list_allnull) %>% sort())
) +
  geom_point() +
  geom_hline(
    yintercept = 
      qt(1 - alpha / 2,
         df = N - 2),
    lty = 3
  ) +
  labs(
    x = "検定統計量の順位",
    y = "検定統計量の絶対値"
  ) +
  theme_classic()
  
```

```{r}
ggplot(
  mapping = aes(
    x = seq_along(p_list_allnull),
    y = p_list_allnull %>% sort()
  )
) +
  geom_point() +
  geom_hline(
    yintercept = alpha,
    lty = 3
  ) +
  labs(
    x = "検定統計量の順位",
    y = "p値"
  ) + 
  theme_classic()
```

```{r}
t_list_allnull %>% 
  abs() %>% 
  .[. > qt(
    1 - alpha / 2,
    df = N - 2
  )]
```

```{r}
z_somealt <- 
  runif(N) >= 0.5

df_list_null_somealt <- 
  seq_len(M - M_F) %>% 
  purrr::map(
    ~ tibble::tibble(
      z = z_somealt,
      y = rnorm(N)
    )
  )

df_list_alternative_somealt <- 
  seq_len(M_F - 2) %>% 
  purrr::map(
    ~ tibble::tibble(
      z = z_somealt,
      y = rnorm(N) + 0.3 * z_somealt
    )
  )

df_list_alternative_somealt <- c(
  df_list_alternative_somealt,
  seq(M_F - 1, M_F) %>% 
    purrr::map(
      ~ tibble::tibble(
        z = z_somealt,
        y = rnorm(N) + 0.5 * z_somealt
      )
    )
)
```

```{r}
result_list_null_somealt <- 
  df_list_null_somealt %>% 
  purrr::map(
    ~ lm(
        formula = y ~ z,
        data = .
    )
  )

result_list_alternative_somealt <- 
  df_list_alternative_somealt %>% 
  purrr::map(
    ~ lm(
        formula = y ~ z,
        data = .
    )
  )
```

```{r}
ggplot(
  mapping = aes(
    x = seq_along(p_list_allnull),
    y = p_list_allnull %>% sort()
  )
) +
  geom_point() +
  geom_hline(
    yintercept = alpha / M,
    lty = 3
    ) +
  labs(
    x = "検定統計量の順位",
    y = "P値"
  ) +
  theme_classic()
```

```{r}
p_list_allnull %>% 
  .[. < (alpha / M)]
```

```{r}
p.adjust(
  p_list_allnull,
  method = "bonferroni"
) %>% 
  .[. < alpha]
```

```{r}
ggplot(
  mapping = aes(
    x = seq_along(t_list_allnull),
    y = abs(t_list_allnull) %>% sort()
  )
) +
  geom_point() +
  geom_hline(
    yintercept = qt(
      1 - alpha / (2 * M),
      df = N - 2
    ),
    lty = 3
  ) +
  labs(
    x = "検定統計量の順位",
    y = "検定統計量の絶対値"
  ) + 
  theme_classic()
```

```{r}
t_list_allnull %>% 
  abs() %>% 
  .[. >
      qt(1 - alpha / (2 * M),
         df = N - 2)]
```

```{r}
t_list_allnull_all <- 
  seq_len(L) %>% 
  purrr::map(
    ~ compute_t_statistics_null_effect(
        N = N,
        M = M,
        alpha = alpha,
        seed = .
    )
  )
```

```{r}
t_rejected_allnull_all <- 
  t_list_allnull_all %>% 
  purrr::map(
    function(t_list_allnull) {
      length_rejected <- 
        t_list_allnull %>% 
        abs() %>% 
        .[. > qt(1 - alpha / 2,
                 df = N - 2)] %>% 
        length()
      return(length_rejected > 0)
    }
  ) %>% 
  purrr::reduce(c)

fwer_allnull <- 
  sum(t_rejected_allnull_all) /
  length(t_rejected_allnull_all)

fwer_allnull
```

```{r}
t_rejected_allnull_bonferroni_all <- 
  t_list_allnull_all %>% 
  purrr::map(
    function(t_list_allnull) {
      length_rejected <- 
        t_list_allnull %>% 
        abs() %>% 
        .[. > qt(1 - alpha / (2 * M),
                 df = N - 2)] %>% 
        length()
      return(length_rejected > 0)
    }
  ) %>% 
  purrr::reduce(c)

fwer_allnull_bonferroni <- 
  sum(t_rejected_allnull_bonferroni_all) / 
  length(t_rejected_allnull_bonferroni_all)

fwer_allnull_bonferroni
```

```{r}
t_list_somealt_null <- 
  result_list_null_somealt %>% 
  purrr::map(
    ~ summary(.) %>% 
      coef() %>% 
      .["zTRUE", "t value"]
  ) %>% 
  purrr::reduce(c)

t_list_somealt_alternative <- 
  result_list_alternative_somealt %>% 
  purrr::map(
    ~ summary(.) %>% 
      coef() %>% 
      .["zTRUE", "t value"]
  ) %>% 
  purrr::reduce(c)

t_list_somealt <- c(
  t_list_somealt_null,
  t_list_somealt_alternative
)
```

```{r}
null_list_somealt <- c(
  rep(
    "null",
    length = length(t_list_somealt_null)
  ),
  rep("alternative",
      length = length(t_list_somealt_alternative))
)
```

```{r}
p_list_somealt_null <- 
  result_list_null_somealt %>% 
  purrr::map(
    ~ summary(.) %>% 
      coef() %>% 
      .["zTRUE", "Pr(>|t|)"]
  ) %>% 
  purrr::reduce(c)

p_list_somealt_alternative <- 
  result_list_alternative_somealt %>% 
  purrr::map(
    ~ summary(.) %>% 
      coef() %>% 
      .["zTRUE", "Pr(>|t|)"]
  ) %>% 
  purrr::reduce(c)

p_list_somealt <- c(
  p_list_somealt_null,
  p_list_somealt_alternative
)
```

```{r}
ggplot(
  mapping = aes(
    x = seq_along(t_list_somealt),
    y = t_list_somealt[t_list_somealt %>% abs() %>% order()] %>% abs(),
    color = null_list_somealt[t_list_somealt %>% abs() %>% order()]
  )
) +
  geom_point() +
  geom_hline(
    yintercept = qt(
      1 - alpha / 2,
      df = N - 2
    ),
    color = color_main,
    lty = 3
  ) +
  labs(
    x = "検定統計量の順位",
    y = "検定統計量の絶対値",
    color = "帰無仮説であるか否か"
  ) +
  scale_color_viridis_d() +
  theme_classic()
```

```{r}
ggplot(
  mapping = aes(
    x = seq_along(p_list_somealt),
    y = p_list_somealt[p_list_somealt %>% order()],
    color = null_list_somealt[p_list_somealt %>% order()]
  )
) +
  geom_point() +
  geom_hline(
    yintercept = alpha,
    color = color_main,
    lty = 3
  ) +
  labs(
    x = "検定統計量の順位",
    y = "p値",
    color = "帰無仮説であるか否か"
  ) +
  scale_color_viridis_d() +
  theme_classic()
```

```{r}
p_rejected_somealt <- 
  p_list_somealt_alternative %>% 
  .[. < alpha]

p_rejected_somealt
```

```{r}
p_rejected_somealt_false <- 
  p_list_somealt_null %>% 
  .[. < alpha]

p_rejected_somealt_false
```

```{r}
ggplot(
  mapping = aes(
    x = seq_along(t_list_somealt),
    y = t_list_somealt[t_list_somealt %>% abs() %>% order()] %>% abs(),
    color = null_list_somealt[t_list_somealt %>% abs() %>% order()]
  )
) +
  geom_point() +
  geom_hline(
    yintercept = qt(
      1 - alpha / (2 * M),
      df = N - 2
    ),
    color = color_main,
    lty = 3
  ) +
  labs(
    x = "検定統計量の順位",
    y = "検定統計量の絶対値",
    color = "帰無仮説であるか否か"
  ) +
  scale_color_viridis_d() +
  theme_classic()
```

```{r}
t_rejected_sumealt_bonferroni <- 
  t_list_somealt_alternative %>% 
  .[. > qt(
    1 - alpha / (2 * M),
    df = N - 2
  )]

t_rejected_sumealt_bonferroni
```

```{r}
t_rejected_sumealt_bonferroni <- 
  t_list_somealt_null %>% 
  .[. > qt(
    1 - alpha / (2 * M),
    df = N - 2
  )]

t_rejected_sumealt_bonferroni
```


```{r}
ggplot(
  mapping = aes(
    x = seq_along(p_list_somealt),
    y = p_list_somealt[p_list_somealt %>% order()],
    color = null_list_somealt[p_list_somealt %>% order()]
  )
) +
  geom_point() +
  geom_hline(
    yintercept = alpha / M,
    color = color_main,
    lty = 3
  ) +
  labs(
    x = "検定統計量の順位",
    y = "p値",
    color = "帰無仮説であるか否か"
  ) +
  scale_color_viridis_d() +
  theme_classic()
```

```{r}
p_rejected_somealt_bonferroni <- 
  p_list_somealt_alternative %>%
  sort() %>% 
  .[. < alpha / M]

p_rejected_somealt_bonferroni
```

```{r}
p_rejected_somealt_bonferroni <- 
  p_list_somealt_null %>%
  sort() %>% 
  .[. < alpha / M]

p_rejected_somealt_bonferroni
```

```{r}
t_list_somealt_null <- 
  seq_len(L) %>% 
  purrr::map(
    ~ compute_t_statistics_null_effect(
        N = N,
        M = M - M_F,
        alpha = alpha,
        seed = .
    )
  )

t_list_somealt_alternative <- 
  seq_len(L) %>% 
  purrr::map(
    ~ compute_t_statistics_alternative_effect(
        N = N,
        M = M_F,
        alpha = alpha,
        seed = .
    )
  )
```

```{r}
t_rejected_somealt_null <- 
  t_list_somealt_null %>% 
  purrr::map(
    function(t_list_somealt) {
      length_rejected <- 
        t_list_somealt %>% 
        abs() %>% 
        .[. > qt(
          1 - alpha / 2,
          df = N - 2
        )] %>% 
        length()
      return(length_rejected > 0)
    }
  ) %>% 
  purrr::reduce(c)

fwer_somealt <- 
  sum(t_rejected_somealt_null) / 
  length(t_rejected_somealt_null)

fwer_somealt
```

```{r}
t_rejected_somealt_bonferroni_null <- 
  t_list_somealt_null %>% 
  purrr::map(
    function(t_list_somealt) {
      length_rejected <- 
        t_list_somealt %>% 
        abs() %>% 
        .[. > qt(
          1 - alpha / (2 * M),
          df = N - 2
        )] %>% 
        length()
      return(length_rejected > 0)
    }
  ) %>% 
  purrr::reduce(c)

fwer_somealt_bonferroni <- 
  sum(t_rejected_somealt_bonferroni_null) / 
  length(t_rejected_somealt_bonferroni_null)

fwer_somealt_bonferroni
```

```{r}
t_rejected_somealt_alternative <- 
  t_list_somealt_alternative %>% 
  purrr::map(
    function(t_list_somealt) {
      length_rejected <- 
        t_list_somealt %>% 
        abs() %>% 
        .[. > qt(
          1 - alpha / 2,
          df = N - 2
        )] %>% 
        length()
      return(length_rejected)
    }
  ) %>% 
  purrr::reduce(c)

power_somealt <- 
  sum(t_rejected_somealt_alternative) /
  (
    length(t_list_somealt_alternative) * 
      length(t_list_somealt_alternative[[1]])
    )

power_somealt
```

```{r}
t_rejected_somealt_bonferroni_alternative <- 
  t_list_somealt_alternative %>% 
  purrr::map(
    function(t_list_somealt) {
      length_rejected <- 
        t_list_somealt %>% 
        abs() %>% 
        .[. > qt(
          1 - alpha / (2 * M),
          df = N - 2
        )] %>% 
        length()
      return(length_rejected)
    }
  ) %>% 
  purrr::reduce(c)

power_somealt_bonferroni <- 
  sum(t_rejected_somealt_bonferroni_alternative) /
  (
    length(t_list_somealt_alternative) * 
      length(t_list_somealt_alternative[[1]])
    )

power_somealt_bonferroni

```

```{r}
ggplot(
  mapping = 
    aes(
      x = seq_along(p_list_somealt),
      y = p_list_somealt[p_list_somealt %>% order()],
      color = null_list_somealt[p_list_somealt %>% order()]
    )
) +
  geom_point() +
  geom_hline(
    yintercept = alpha,
    color = "red"
  ) +
  geom_line(
    mapping = 
      aes(
        x = seq_along(p_list_somealt),
        y = alpha / (M - seq_along(p_list_somealt) + 1)
      ),
    color = "blue"
  ) +
  scale_color_viridis_d() +
  labs(
    x = "検定統計量の順位",
    y = "p値",
    color = "帰無仮説であるか否か"
  ) +
  theme_classic()
```

```{r}
p_rejected_somealt_bonferroni_holm <- 
  p_list_somealt_alternative %>% 
  sort()

index <- (
  p_rejected_somealt_bonferroni_holm <=
    alpha / (M - seq_along(p_list_somealt) + 1)
)

index <- 
  index %>% 
  cummin() %>% 
  as.logical()

p_rejected_somealt_bonferroni_holm <- 
  p_rejected_somealt_bonferroni_holm[index]

p_rejected_somealt_bonferroni_holm
```

```{r}
p_rejected_somealt_false_bonferroni_holm <- 
  p_list_somealt_null %>% 
  sort()

index <- 
  p_rejected_somealt_false_bonferroni_holm <=
  alpha / (M - seq_along(p_rejected_somealt_false_bonferroni_holm) + 1)

index <- 
  index %>% 
  cummin() %>% 
  as.logical()

p_rejected_somealt_false_bonferroni_holm <- 
  p_rejected_somealt_false_bonferroni_holm[index]

p_rejected_somealt_false_bonferroni_holm
```

```{r}
p_adjusted_somealt_bonferroni_holm <- 
  p.adjust(
    p = p_list_somealt,
    method = "holm"
  )

p_adjusted_somealt_bonferroni_holm %>% 
  format(digits = 1, scientific = FALSE)
```

```{r}
t_rejected_somealt_bonferroni_holm_null <- 
  t_list_somealt_null %>% 
  purrr::map(
    function(t_list_somealt) {
      length_rejected <- 
        t_list_somealt %>% 
        abs() %>% 
        sort(decreasing = TRUE) %>% 
        .[. > 
            qt(1 - alpha / (2 * (M - seq_along(t_list_somealt) + 1)),
               df = N - 2)
        ] %>% 
        length()
      return(length_rejected > 0)
    }
  ) %>% 
  purrr::reduce(c)

FWER_somealt_bonferroni_holm <- 
  sum(t_rejected_somealt_bonferroni_holm_null) / 
  length(t_rejected_somealt_bonferroni_holm_null)

FWER_somealt_bonferroni_holm
```

```{r}
t_rejected_somealt_bonferonni_holm_alternative <- 
  t_list_somealt_alternative %>% 
  purrr::map(
    function(t_list_somealt) {
      length_rejected <- 
        t_list_somealt %>% 
        abs() %>% 
        sort(decreasing = TRUE) %>% 
        .[. >
            qt(1 - alpha / (2 * (M - seq_along(t_list_somealt) + 1)),
               df = N - 2)
          ] %>% 
        length()
      return(length_rejected)
    }
  ) %>% 
  purrr::reduce(c)

power_somealt_bonferroni_holm <- 
  sum(t_rejected_somealt_bonferonni_holm_alternative) /
  (
    length(t_list_somealt_alternative) * 
      length(t_list_somealt_alternative[[1]])
  )

power_somealt_bonferroni_holm
```

<br>

# [3-4]多重検定: FDR制御

```{r}
set.seed(1)
N <- 500
M <- 60
M_0 <- 45
L <- 100
alpha <- 0.05
tau_population <- 0.2
```

```{r}
z <- runif(N) >= 0.5

df_list_1 <-
  seq_len(M - M_0) %>%
  purrr::map(
    ~ tibble::tibble(
        z = z,
        y = rnorm(N) + tau_population * z
      )
  ) 
df_list_0 <-
  seq_len(M_0) %>%
  purrr::map(
    ~ tibble::tibble(
        z = z,
        y = rnorm(N)
      )
  )
df_list <-
  c(
    df_list_1, 
    df_list_0
  )
```

```{r}
result_list_1 <-
  df_list_1 %>%
  purrr::map(
    ~ lm(
        formula = y ~ z, 
        data = .
      )
  )
result_list_0 <-
  df_list_0 %>%
  purrr::map(
    ~ lm(
        formula = y ~ z, 
        data = .
      )
  )
```

```{r}
t_list_1 <- 
  result_list_1 %>% 
  purrr::map(
    ~ summary(.) %>% 
      coef() %>% 
      .["zTRUE", "t value"]
  ) %>% 
  purrr::reduce(c)

t_list_0 <- 
  result_list_0 %>% 
  purrr::map(
    ~ summary(.) %>% 
      coef() %>% 
      .["zTRUE", "t value"]
  ) %>% 
  purrr::reduce(c)
```

```{r}
p_list_1 <- 
  result_list_1 %>% 
  purrr::map(
    ~ summary(.) %>% 
      coef() %>% 
      .["zTRUE", "Pr(>|t|)"]
  ) %>% 
  purrr::reduce(c)

p_list_0 <- 
  result_list_0 %>% 
  purrr::map(
    ~ summary(.) %>% 
      coef() %>% 
      .["zTRUE", "Pr(>|t|)"]
  ) %>% 
  purrr::reduce(c)
```

```{r}
ggplot(
  mapping = 
    aes(x = seq_along(t_list_1),
        y = t_list_1 %>% abs() %>% sort())
) +
  geom_point() +
  geom_hline(
    yintercept = qt(
      1 - alpha / 2,
      df = N - 2
    ),
    color = "red",
    lty = 2
  ) +
  labs(
    x = "検定統計量の順位",
    y = "検定統計量の絶対値"
  ) +
  theme_classic()
```

```{r}
ggplot(
  mapping = 
    aes(
      x = seq_along(p_list_1),
      y = p_list_1 %>% abs() %>% sort()
    )
) +
  geom_point() +
  geom_hline(
    yintercept = alpha,
    color = "red",
    lty = 2
  ) +
  labs(
    x = "検定統計量の順位",
    y = "p値"
  ) +
  theme_classic()
```

```{r}
ggplot(
  mapping = 
    aes(x = seq_along(t_list_0),
        y = t_list_0 %>% abs() %>% sort())
) + 
  geom_point() +
  geom_hline(
    yintercept = 
      qt(1 - alpha / 2,
         df = N - 2),
    color = "red",
    lty = 2
  ) +
  labs(
    x = "検定統計量の順位",
    y = "検定統計量の絶対値"
  ) +
  theme_classic()
```

```{r}
ggplot(
  mapping = 
    aes(
      x = seq_along(p_list_0),
      y = p_list_0 %>% sort()
    )
) +
  geom_point() +
  geom_hline(
    yintercept = alpha,
    color = "red",
    lty = 3
  ) +
  labs(
    x = "検定統計量の順位",
    y = "p値"
  ) +
  theme_classic()
```

```{r}
t_list_rejected_1 <- 
  t_list_1 %>% 
  .[abs(.) >
      qt(
        1 - alpha / 2,
        df = N - 2
      )]

t_list_rejected_1
```

```{r}
t_list_rejected_0 <- 
  t_list_0 %>% 
  .[abs(.) >
      qt(
        1 - alpha / 2,
        df = N - 2
      )]

t_list_rejected_0
```

```{r}
fdr <- 
  length(t_list_rejected_0) /
  (
    length(t_list_rejected_0) +
      length(t_list_rejected_1)
  )

fdr
```

```{r}
p_list_sorted <- 
  c(
    p_list_1,
    p_list_0
  ) %>% 
  sort()

i <- M

flag_continue <- TRUE

while (
  flag_continue & i > 1
) {
  test <- 
    p_list_sorted[i] <= (i / M) * alpha
  if (
    test
  ) {
    flag_continue <- FALSE
  }
  i <- i - 1
} 

i
```

```{r}
p_list_sorted[i]
```

```{r}
p_list_rejected_benjamini_hotchberg_1 <- 
  p_list_1[
    p_list_1 <= p_list_sorted[i]
  ]

p_list_rejected_benjamini_hotchberg_1
```

```{r}
p_list_rejected_benjamini_hotchberg_0 <- 
  p_list_0[
    p_list_0 <= p_list_sorted[i]
  ]

p_list_rejected_benjamini_hotchberg_0
```

```{r}
fdr_benjamini_hotchberg <- 
  length(p_list_rejected_benjamini_hotchberg_0) /
  (
    length(p_list_rejected_benjamini_hotchberg_0) +
      length(p_list_rejected_benjamini_hotchberg_1)
  )

fdr_benjamini_hotchberg
```

```{r}
p_list_all <- 
  seq_len(L) %>% 
  purrr::map(
    ~ compute_p_value_mixed_effect(
      N = N,
      M = M,
      M_0 = M_0,
      seed = .
    )
  )
```

```{r}
p_value_all <- 
  p_list_all %>% 
  purrr::map(
    ~ compute_p_value_benjamini_hotchberg(
      p_list_1 = p_list_1,
      p_list_0 = p_list_0,
      alpha = alpha
    )
  )
```

```{r}
fdr_expected <- 
  purrr::map2(
    p_list_all,
    p_value_all,
    ~ compute_fdr(
        p_list_1 = .x$p_list_1,
        p_list_0 = .x$p_list_0,
        p_value = .y
    )
  ) %>% 
  purrr::reduce(c) %>% 
  mean(na.rm = TRUE)

fdr_expected
```

```{r}
p_list_sorted <- 
  c(
    p_list_1,
    p_list_0
  ) %>% 
  sort()

i <- M
flag_continue <- TRUE

while (
  flag_continue & i > 1
) {
  test <- 
    (
      p_list_sorted[i] <= (1 / M) * alpha / sum(1 / seq_len(M))
    )
  if (
    test
  ) {
    flag_continue <- FALSE
  }
  i <-  i - 1
}

i
```

```{r}
p_list_sorted[i]
```

```{r}
p_list_rejected_benjamini_yekutieli_1 <- 
  p_list_1[
    p_list_1 <= p_list_sorted[i]
  ]

p_list_rejected_benjamini_yekutieli_1
```

```{r}
p_list_rejected_benjamini_yekutieli_0 <- 
  p_list_0[
    p_list_0 <= p_list_sorted[i]
  ]

p_list_rejected_benjamini_yekutieli_0
```

```{r}
fdr_benjamini_yekutieli <- 
  length(p_list_rejected_benjamini_yekutieli_0) /
  (
    length(p_list_rejected_benjamini_yekutieli_0) + 
      length(p_list_rejected_benjamini_yekutieli_1)
  )

fdr_benjamini_yekutieli
```

```{r}
p_value_all <- 
  p_list_all %>% 
  purrr::map(
    ~ compute_p_value_benjamini_yekutieli(
      p_list_1 = .$p_list_1,
      p_list_0 = .$p_list_0,
      alpha = alpha
    )
  )
```

```{r}
fdr_expected <- 
  purrr::map2(
    p_list_all,
    p_value_all,
    ~ compute_fdr(
      p_list_1 = .x$p_list_1,
      p_list_0 = .x$p_list_0,
      p_value = .y
    )
  ) %>% 
  purrr::reduce(c) %>% 
  mean()

fdr_expected
```



























